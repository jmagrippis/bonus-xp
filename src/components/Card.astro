---
import type {HTMLTag} from 'astro/types'

type Props = {
	title: string
	href: string
	tag?: HTMLTag
	class?: string
}

const {href, title, tag: Element = 'div', class: className = ''} = Astro.props
---

<Element class={`card ${className}`}>
	<a href={href}>
		<h2 class="mb-2 text-xl font-semibold drop-shadow">
			{title}
			<span>&rarr;</span>
		</h2>
		<p>
			<slot />
		</p>
	</a>
</Element>
<style>
	/* inspired by Hyperplexed:
	https://www.youtube.com/watch?v=joDhIH6Xumw */
	.card {
		--g1-hue: var(--brand-hue);
		--g2-hue: var(--accent-hue);
		--g3-hue: 340;

		--g1: hsl(var(--g1-hue) 90% 87%);
		--g2: hsl(var(--g2-hue) 70% 92%);
		--g3: hsl(var(--g3-hue) 88% 80%);
		--_animation-duration: var(--short-animation-duration);

		@apply relative rounded border border-foreground-accent shadow;

		> a {
			background-image: radial-gradient(
				hsl(var(--surface-brand-2-color)) 8%,
				transparent 8%
			);
			background-position: 0% 0%;
			background-size: 2rem 2rem;
			transition: background-position var(--_animation-duration) ease;
			z-index: 2;

			@apply relative block h-full w-full px-6 py-4;
		}

		&:before {
			content: '';
			background: linear-gradient(
				130deg,
				transparent 0 33%,
				var(--g1) 66%,
				var(--g2) 83.5%,
				var(--g3) 100%
			);
			background-position: 0 0;
			background-size: 300% 300%;
			transition: background-position var(--_animation-duration) ease;
			@apply absolute left-0 top-0 h-full w-full rounded;
		}

		&:hover {
			&:before {
				background-position: 100% 100%;
			}

			> a {
				background-position: -10% 0%;
			}
		}
	}

	:global([data-theme='dark']) .card {
		--g1: hsl(var(--g1-hue) 100% 46%);
		--g2: hsl(var(--g2-hue) 82% 46%);
		--g3: hsl(var(--g3-hue) 98% 46%);
	}
</style>
